---

    - name: Ensure frnetwork exists
      become: no
      containers.podman.podman_network:
        name: frnetwork
        state: present

    - name: Create safr-pod
      become: no
      containers.podman.podman_pod:
        name: safr-pod
        state: created
        network: frnetwork
        ports:
          - "5433:5432"
          - "{{fr_api_http_port}}:3000"
          - "{{fr_api_https_port}}:443"
          - "{{fr_cams_http_port}}:80"
          #- "{{fr_cams_https_port}}:443"

    - name: Deploy fr-cams
      become: no
      containers.podman.podman_container:
        name: fr-cams
        image: docker.io/eyemetricfr/fr-cams:1.5.1
        state: created
        restart_policy: always
        pod: safr-pod
        env:
          SAFR_DB_ADDR: "{{host_ip}}"
          SAFR_DB_PORT: "{{fr_db_port}}"
          VID_STREAM_ADDR: "{{vid_stream_addr}}"
          DETECT_ADDR: "{{detect_addr}}"
          ALERTS_ADDR: "{{alerts_addr}}"
          FR_API: "{{fr_api}}"
          MIN_MATCH: "{{cams_min_match}}"
          MATCH_EXPIRES: "{{cams_match_expires}}"
          MIN_QUALITY: "{{cams_min_quality}}"
          MIN_DUPE_MATCH: "{{cams_min_dupe_match}}"

    - name: Deploy frdb
      become: no
      containers.podman.podman_container:
        name: frdb
        image: docker.io/postgres:14.1
        restart_policy: always
        state: created
        pod: safr-pod
        env:
          POSTGRES_USER: "{{fr_db_user}}"
          POSTGRES_PASSWORD: "{{fr_db_pwd}}"
          POSTGRES_DB: "{{fr_db_name}}"
          TZ: "{{time_zone}}"
        volumes:
          - /opt/eyemetric/fr/data/safr_pgdata/_data:/var/lib/postgresql/data:Z

    - name: Deploy fr-api
      become: no
      containers.podman.podman_container:
        name: fr-api
        image: docker.io/eyemetricfr/fr-api:1.5.1
        restart_policy: always
        state: created
        pod: safr-pod
        env:
          USE_TLS: "{{use_tls}}"
          SAFR_DB_ADDR: "{{host_ip}}"
          SAFR_DB_PORT: "{{fr_db_port}}"
          FR_BACKEND: pv
          CV_URL: "{{cv_url}}"
          PV_IDENT_URL: "{{ident_url}}"
          PV_PROC_URL: "{{proc_url}}"
          MIN_MATCH: "{{min_match}}"
          MATCH_EXPIRES: "{{match_expires}}"
          MIN_QUALITY: "{{min_quality}}"
          MIN_DUPE_MATCH: "{{min_dupe_match}}"
          TPASS_USER: "{{tpass_user}}"
          TPASS_PWD: "{{tpass_pwd}}"
          TPASS_ADDR: "{{tpass_url}}"
          RUST_LOG: "{{log_level}}"
          TZ: "{{time_zone}}"
        volumes:
          - /opt/eyemetric/fr/certs:/cert

    - name: "Ensure the systemd user dir exists"
      become: no
      file:
        path: '/home/{{ eyemetric_user }}/.config/systemd/user'
        state: directory
        owner: '{{ eyemetric_user }}'
        group: '{{ eyemetric_group }}'
        mode: '0744'

    - name: Generate systemd unit files for safr-pod
      ansible.builtin.shell:
        cmd: 'cd /home/{{eyemetric_user}}/.config/systemd/user && podman generate systemd --new --files --name safr-pod'
      register: result
      failed_when: result.rc != 0
      tags:
        - systemd

    - name: Ensure frdb container starts first.
      become: no
      ansible.builtin.lineinfile:
        path: '/home/{{ eyemetric_user }}/.config/systemd/user/container-frdb.service'
        insertbefore: '^After='
        line: 'Before=container-fr-api.service'
