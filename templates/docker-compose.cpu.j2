#version: "3.9"
services:
    safrdb:
        image: {{ safr_images.safrdb }}
        container_name: safrdb
        restart: always
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_PASSWORD=admin
            - POSTGRES_DB={{ safr_db_name }}
            - TZ="America/New_York"
        ports:
            - "{{ safr_db_port}}:5432"
        volumes:
          - {{ app_dir}}/data/safr_pgdata/_data:/var/lib/postgresql/data:Z
              #- /etc/timezone:/etc/timezone:ro
              #- /etc/localtime:/etc/localtime:ro

    safr-api:
        image: {{ safr_images.safr_api }}
        container_name: safr-api
        restart: always
        ports:
           - "{{ safr_api_http_port }}:3030"
             #- "443:443"
        environment:
            - SAFR_DB_ADDR={{ local_ip }}
            - SAFR_DB_PORT={{ safr_db_port}}
            - VID_STREAM_ADDR={{ vid_stream_addr }}
            - DETECT_ADDR={{ detect_addr }}
            - ALERTS_ADDR={{ alerts_addr}}
            - IDENT_API={{ ident_api }}
            - PROC_API={{ proc_api }}
            - TPASS_USER={{ tpass_user }}
            - TPASS_PWD={{ tpass_pwd }}
            - TPASS_ADDR={{ tpass_svc }}
            - MIN_MATCH={{ safr_api_min_match }}
            - MATCH_EXPIRES={{ safr_api_match_expires }}
            - MIN_QUALITY={{ safr_api_min_quality }}
            - MIN_DUPE_MATCH={{ safr_api_min_dupe_match }}
            - RUST_LOG=warn,pvwarp=debug
            - TZ="{{ tz }}"
        volumes:
          #- /etc/timezone:/etc/timezone:ro
          #  - /etc/localtime:/etc/localtime:ro
            - {{ app_dir }}/certs:/cert

    safr-cams:
        image: {{ safr_images.safr_cams }}
        container_name: safr-cams
        restart: always
        ports:
           - "{{ safr_cams_http_port }}:80"
           - "{{ safr_cams_https_port }}:443"
        environment:
            - SAFR_DB_ADDR={{ local_ip }}
            - SAFR_DB_PORT={{ safr_db_port }}
            - VID_STREAM_ADDR={{ vid_stream_addr }}
            - DETECT_ADDR={{ detect_addr }}
            - ALERTS_ADDR={{ alerts_addr}}
            - FR_API={{ fr_api }}
            - MIN_MATCH={{ safr_cams_min_match }}
            - MATCH_EXPIRES={{ safr_cams_match_expires }}
            - MIN_QUALITY={{ safr_cams_min_quality }}
            - MIN_DUPE_MATCH={{ safr_cams_min_dupe_match }}
            - CONSOLE_LOOKUP=false
            - ASPNETCORE_URLS=http://+80
              #- ASPNETCORE_URLS=https://+443;http://+80
              #- ASPNETCORE_HTTPS_PORT=443
              #- ASPNETCORE_Kestrel__Certificates__Default__Password=eyemetric
              #- ASPNETCORE_Kestrel__Certificates__Default__Path=/https/EyemetricFR.Server.pfx
            - TZ="America/New_York"
        volumes:
            - {{ app_dir }}/certs:/https
              #- /etc/timezone:/etc/timezone:ro
              #- /etc/localtime:/etc/localtime:ro

    proc:
        image: {{ pv_images.processor }}
        container_name: proc-v6
        environment:
            - PV_HTTP_INTERFACE={{ pv_http_interface }}
            - PV_INFERENCE_WORKERS={{ pv_inference_workers }}
        network_mode: bridge
        restart: always
        ports:
            - "{{ pv_proc_port_1 }}:50051"
            - "{{ pv_proc_port_2 }}:8081"
    ident:
        image: {{ pv_images.identity }}
        container_name: ident-v4
        environment:
            - POSTGRES_URI={{ postgres_uri }}
            - HTTP_PROXY={{http_proxy}}
        network_mode: bridge
        restart: always
        ports:
            - "{{ pv_ident_port_1 }}:5656"
            - "{{ pv_ident_port_2 }}:8080"
        depends_on:
            - pvdb
        links:
            - pvdb
    pvdb:
        image: {{ pv_images.pvdb }}
        container_name: pvdb
        network_mode: bridge
        restart: always
        environment:
            - POSTGRES_USER={{ pv_pg_user }}
            - POSTGRES_PASSWORD={{ pv_pg_pwd }}
            - POSTGRES_DB={{ pv_db_name }}
        ports:
            - "5432:5432"
        volumes:
          - {{ app_dir }}/data/pvdb_pgdata/_data:/var/lib/postgresql/data:Z

    pvstrm:
        image: {{ pv_images.streaming }}
        container_name: streaming-v6
        environment:
            - TZ="{{ tz }}"
            - PV_INFERENCE_WORKERS={{ PV_INFERENCE_WORKERS }}
            - PV_POSTPROCESSOR_WORKERS={{ PV_POSTPROCESSOR_WORKERS }}
            - PV_OUTPUT_FACES_ONLY={{ PV_OUTPUT_FACES_ONLY }}
            - PV_FACE_QUALITY_TRACKING={{ PV_FACE_QUALITY_TRACKING }}
        network_mode: bridge
        restart: always
        ports:
            - "5000:5000"
            - "5050:5050"
            - "5051:5051"
        volumes:
            - type: tmpfs
              target: /dev/shm
              tmpfs:
                  size: 3g #000000000 # ~6gb

        depends_on:
            - pvdb
        
volumes:
    pv-data:
    safr-db:
