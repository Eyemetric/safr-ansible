---
- name: Install SAFR for Ubuntu
  hosts: all
  remote_user: "{{ eyemetric_user }}"
  become: yes
  #NOTE: already installed docker and nvidia crap
  #There's work to be done to make it work here.

  tasks:
    - name: install what docker needs
      ansible.builtin.apt:
        pkg:
        - curl
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        state: present

   #was safr_installation_tasks
    - name: copy safr app directory structure
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ eyemetric_user }}'
        group: '{{ eyemetric_user }}'
        recurse: true
      loop:
        - '{{ app_dir }}/cpu'
        - '{{ app_dir }}/gpu'
        - '{{ app_dir }}/data'
        - '{{ app_dir }}/certs'
      tags:
        - foo

    - name: copy safr test scripts
      copy:
        src: scripts
        dest: '{{ app_dir }}'
        owner: '{{ eyemetric_user }}'
        group: '{{ eyemetric_group }}'
        mode: '0774'

    #was rhel_gpu_tasks
    - name: use docker login so we ca pull our images
      #become: no
      register: dock_login
      docker_login:
        username: '{{ docker_user }}'
        password: '{{ docker_pwd }}'
        #registry: docker.io


    - name: pull gpu based paravision containers
      #become: no
      register: docker_pull
      docker_image:
        source: pull
        state: present
        name: '{{ item.value }}'
      loop: '{{ pv_images | dict2items }}'

    - debug:
        var: docker_pull

    - name: pull SAFR containers from docker.io (gpu)
      #become: no
      register: docker_pull
      docker_image:
        source: pull
        state: present
        name: '{{ item.value }}'
      loop: '{{ safr_images | dict2items }}'

    # we're not currently using the var.env the config generates everything in the compose file
    - name: copy config template files to app directories
      template:
        src: var.env.j2
        dest: '{{ app_dir }}/gpu/var.env'
        owner: '{{ eyemetric_user }}'
        group: '{{ eyemetric_user }}'
      tags:
        - foo
        -
    - name: copy docker-compose template
      template:
        src: docker-compose.gpu.j2
        dest: '{{ app_dir }}/gpu/docker-compose.yml'
        owner: '{{ eyemetric_user }}'
        group: '{{ eyemetric_user }}'
      tags:
        - foo

  #data volume stuff

    - name: check for existing pv data volume (existing installation)
      ansible.builtin.stat:
        path: "{{ app_dir }}/data/pvdb_pgdata"
      register: data_vol


    - block:
        - name: back up the existing data volumes as a failsafe to /tmp dir.
         # become: no
          community.general.archive:
            path: "{{ app_dir }}/data"
            dest: "/tmp/data_vol.bk.tgz"
            owner: "{{ eyemetric_user }}"
            group: '{{ eyemetric_group }}'
            mode: "0774"
          when: data_vol.stat.exists

        # our premade volumes save us from running a lot of setuo code.
        # packed some tarbs in an image. clever or stupid?
        # might be better to keep the archive with the ansible repo
        # it's only about 10-12 MB
        - name: setup pre made data volumes as starting point
         # become: no
          register: data_container
          shell: 'docker run -d --rm --name dbdata {{ dbdata_image }}'

        - debug:
            var: data_container

        - name: copy data volumes from data container to tmp dir
          #become: no
          register: data_copy
          shell: |
            docker cp dbdata:/safr_pgdata.gz.tar /tmp
            docker cp dbdata:/pvdb_pgdata.gz.tar /tmp

        - debug:
            var: data_copy

        - name: Stop dbdata container
          #become: no
          docker_container:
            name: dbdata
            state: stopped

        - name: Extract data volume archives to volume location
          unarchive:
            src:  '{{ item }}'
            dest: '{{ app_dir }}/data'
            remote_src: yes
            owner: '{{ eyemetric_user }}'
            group: '{{ eyemetric_group }}'
            mode: '0774'
          loop:
            - /tmp/safr_pgdata.gz.tar
            - /tmp/pvdb_pgdata.gz.tar
          tags:
            - arch
      when: data_vol.stat.exists != True or overwrite_data_volumes

     # do openssl studd
    - name: install pyOpenSSL
      pip:
        name: pyOpenSSL
    ###############################################
    # Create self signed cert  for safr-api service
    ###############################################
    - name: Create private key (RSA, 4096 bits)
      become: no
      community.crypto.openssl_privatekey:
        path: '{{ cert_dir }}/safr-api.key'
      tags:
        - cert

    - name: Create simple self-signed certificate
      become: no
      community.crypto.x509_certificate:
        path: '{{ cert_dir}}/safr-api.pem'
        privatekey_path: '{{ cert_dir }}/safr-api.key'
        provider: selfsigned
      tags:
        - cert


    ###############################################
    #
    ###############################################
    - name: "Set unpriviledged port access to start at 80"
      lineinfile:
        path: /etc/sysctl.conf
        insertafter: EOF
        line: net.ipv4.ip_unprivileged_port_start=80
      tags:
        - cert
